variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIO_ACCESS_KEY: 'xxx'
  MINIO_SECRET_KEY: 'xxxxxxxx'
  MINIO_HTTP_TRACE: '/dev/stdout'
  MINIO_REGION: 'minio-test-region'
  AWS_ACCESS_KEY_ID: 'xxx'
  AWS_SECRET_ACCESS_KEY: 'xxxxxxxx'
  AWS_DEFAULT_REGION: 'minio-test-region'
  AWS_S3_ENDPOINT: 'http://s3server.local:9000'
  PYTEST_ADDOPTS: >-
      --color=yes -vs
      --log-cli-level INFO
      --log-format="%(asctime)s.%(msecs)03d  %(levelname)-8s %(module)s:%(funcName)s:%(lineno)-5d   %(message)s"
  PYTEST_ASAN_CMD: /usr/bin/time -v catchsegv $CI_PROJECT_DIR/tools/run_with_asan.sh python3 -u -m pytest
  GTEST_COLOR: "1"
  PYTHONPATH: $CI_PROJECT_DIR:$CI_PROJECT_DIR/backend/build
  JITQPATH: $CI_PROJECT_DIR
  LD_LIBRARY_PATH: $LD_LIBRARY_PATH:/opt/clang+llvm-9.0.0/lib
  ASAN_SYMBOLIZER_PATH: /opt/clang+llvm-9.0.0/bin/llvm-symbolizer
  ASAN_LIBRARY_PATH: /opt/clang+llvm-9.0.0/lib/clang/9.0.0/lib/linux/libclang_rt.asan-x86_64.so
  SEGFAULT_SIGNALS: "bus abrt"
  CC: clang-9.0
  CXX: clang++-9.0

services:
  - name: minio/minio:RELEASE.2019-06-01T03-46-14Z
    command: ["server", "/data"]
    alias: s3server.local

default:
  image: ingomuellernet/buildenv-jitq:2020-10-24

format-cpp:
  stage: build
  script:
    - cd backend/build
    - cmake ../src
    - make check-format

format-python:
  stage: build
  before_script:
    - pip3 install -r requirements.txt
  script:
    - tools/check_format_python.sh
    - tools/check_pylint.sh

rel-build:
  stage: build
  script:
    - cd backend/build
    - cmake ../src
    - make
  artifacts:
    paths:
      - backend/build/*

dbg-build:
  stage: build
  variables:
    ASAN_OPTIONS: detect_leaks=0
  script:
    - cd backend/build
    - >-
        cmake ../src
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DLLVM_ASAN=ON
    - make
  artifacts:
    paths:
      - backend/build/*

clang-tidy:
  stage: test
  dependencies:
    - dbg-build
  script:
    - cd backend/build
    - make -k check-tidy

cppcheck:
  stage: test
  dependencies:
    - dbg-build
  script:
    - cd backend/build
    - make cppcheck

python-tests-omp:
  stage: test
  dependencies:
    - dbg-build
  tags:
    - ptrace
  variables:
    OMP_NUM_THREADS: 8
    # Deactivate LSan, as somehow it doesn't work inside docker and with several OpenMP threads
    ASAN_OPTIONS: detect_leaks=0
  before_script:
    - pip3 install -r requirements.txt
    - echo -e "CC=clang-9.0\nCXX=clang++-9.0\nCXXFORMAT=clang-format-9.0\nLIBOMPDIR=/opt/clang+llvm-9.0.0/lib" > backend/src/generate/src/code_gen/Makefile.local
    - cp jitq_config.ci.json jitq_config.json
  script:
    - cd python/jitq/tests
    - $PYTEST_ASAN_CMD test_omp_environment.py --target omp
    - $PYTEST_ASAN_CMD test_operators.py --target omp

python-tests-asan:
  stage: test
  dependencies:
    - dbg-build
  tags:
    - ptrace
  variables:
    OMP_NUM_THREADS: 1
    ASAN_OPTIONS: detect_leaks=1
  before_script:
    - pip3 install -r requirements.txt
    - echo -e "CC=clang-9.0\nCXX=clang++-9.0\nCXXFORMAT=clang-format-9.0\nLIBOMPDIR=/opt/clang+llvm-9.0.0/lib" > backend/src/generate/src/code_gen/Makefile.local
    - cp jitq_config.ci.json jitq_config.json
  script:
    - cd python/jitq/tests
    - $PYTEST_ASAN_CMD test_cli_runner.py
    - $PYTEST_ASAN_CMD test_inlining.py
    - $PYTEST_ASAN_CMD test_operators.py
    - $PYTEST_ASAN_CMD test_optimizer.py
    - $PYTEST_ASAN_CMD test_tpch.py --target singlecore
    - $PYTEST_ASAN_CMD test_tpch.py --target singlecore --tpch_input_format parquet

cpp-test:
  stage: test
  dependencies:
    - dbg-build
  tags:
    - ptrace
  before_script:
  variables:
    # Unlike the test executables are compiled with ASAN, so no need to pre-load
    ASAN_LIBRARY_PATH: ""
  script:
    - cd backend/build
    - /usr/bin/time -v catchsegv ../../tools/run_with_asan.sh ctest -V
