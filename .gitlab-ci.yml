variables:
  GIT_SUBMODULE_STRATEGY: recursive
  MINIO_ACCESS_KEY: 'xxx'
  MINIO_SECRET_KEY: 'xxxxxxxx'
  MINIO_HTTP_TRACE: '/dev/stdout'
  PYTEST_ADDOPTS: '--color=yes -vs'

services:
  - name: minio/minio:RELEASE.2019-06-01T03-46-14Z
    command: ["server", "/data"]
    alias: s3server

format-cpp:
  stage: build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  script:
    - cd backend/build
    - >-
        CC=clang-7.0 CXX=clang++-7.0
        cmake ../src
        -DLLVM_DIR=/opt/clang+llvm-7.0.1/lib/cmake/llvm/
        -Darrow_DIR=/opt/arrow-0.14/lib/cmake/arrow
        -DAWSSDK_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/AWSSDK
        -Daws-c-event-stream_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-c-event-stream/cmake/
        -Daws-c-common_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-c-common/cmake/
        -Daws-checksums_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-checksums/cmake/
        -Daws-cpp-sdk-core_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/aws-cpp-sdk-core
        -Daws-cpp-sdk-s3_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/aws-cpp-sdk-s3
    - make check-format

format-python:
  stage: build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  variables:
    PYTHONPATH: $CI_PROJECT_DIR:$CI_PROJECT_DIR/backend/build
  before_script:
    - pip3 install -r requirements.txt
  script:
    - tools/check_format_python.sh
    - tools/check_pylint.sh

rel-build:
  stage: build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  script:
    - cd backend/build
    - >-
        CC=clang-7.0 CXX=clang++-7.0
        cmake ../src
        -DLLVM_DIR=/opt/clang+llvm-7.0.1/lib/cmake/llvm/
        -Darrow_DIR=/opt/arrow-0.14/lib/cmake/arrow
        -DAWSSDK_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/AWSSDK
        -Daws-c-event-stream_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-c-event-stream/cmake/
        -Daws-c-common_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-c-common/cmake/
        -Daws-checksums_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-checksums/cmake/
        -Daws-cpp-sdk-core_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/aws-cpp-sdk-core
        -Daws-cpp-sdk-s3_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/aws-cpp-sdk-s3
    - make
  artifacts:
    paths:
      - backend/build/*

dbg-build:
  stage: build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  variables:
    ASAN_OPTIONS: detect_leaks=0
  script:
    - cd backend/build
    - >-
        CC=clang-7.0 CXX=clang++-7.0
        cmake ../src
        -DCMAKE_BUILD_TYPE=Debug
        -DCMAKE_EXPORT_COMPILE_COMMANDS=ON
        -DLLVM_ASAN=ON
        -DLLVM_DIR=/opt/clang+llvm-7.0.1/lib/cmake/llvm/
        -Darrow_DIR=/opt/arrow-0.14/lib/cmake/arrow
        -DAWSSDK_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/AWSSDK
        -Daws-c-event-stream_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-c-event-stream/cmake/
        -Daws-c-common_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-c-common/cmake/
        -Daws-checksums_DIR=/opt/aws-sdk-cpp-1.7/lib/aws-checksums/cmake/
        -Daws-cpp-sdk-core_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/aws-cpp-sdk-core
        -Daws-cpp-sdk-s3_DIR=/opt/aws-sdk-cpp-1.7/lib/cmake/aws-cpp-sdk-s3
    - make
  artifacts:
    paths:
      - backend/build/*

clang-tidy:
  stage: test
  dependencies:
    - dbg-build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  script:
    - cd backend/build
    - make -k check-tidy

cppcheck:
  stage: test
  dependencies:
    - dbg-build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  script:
    - cd backend/build
    - make cppcheck

python-tests-parallel:
  stage: test
  dependencies:
    - dbg-build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  tags:
    - ptrace
  variables:
    JITQPATH: $CI_PROJECT_DIR
    LD_LIBRARY_PATH: $LD_LIBRARY_PATH:/opt/clang+llvm-7.0.1/lib
    PYTHONPATH: $CI_PROJECT_DIR/python:$CI_PROJECT_DIR/backend/build
    OMP_NUM_THREADS: 8
    ASAN_SYMBOLIZER_PATH: /opt/clang+llvm-7.0.1/bin/llvm-symbolizer
    ASAN_LIBRARY_PATH: /opt/clang+llvm-7.0.1/lib/clang/7.0.1/lib/linux/libclang_rt.asan-x86_64.so
    # Deactivate LSan, as somehow it doesn't work inside docker and with several OpenMP threads
    ASAN_OPTIONS: detect_leaks=0
    SEGFAULT_SIGNALS: "bus abrt"
  before_script:
    - apt-get update && apt-get install -y python3-pip libgraphviz-dev time
    - pip3 install -r requirements.txt
    - echo -e "CC=clang-7.0\nCXX=clang++-7.0\nLIBOMPDIR=/opt/clang+llvm-7.0.1/lib" > backend/src/generate/src/code_gen/Makefile.local
    - cp jitq_config.ci.json jitq_config.json
    - export AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_KEY
    - export AWS_S3_ENDPOINT=http://s3server:9000
  script:
    - cd python/jitq/tests
    - /usr/bin/time -v catchsegv $JITQPATH/tools/run_with_asan.sh python3 -u -m pytest test_parallel_enironment.py --parallelize true
    - /usr/bin/time -v catchsegv $JITQPATH/tools/run_with_asan.sh python3 -u -m pytest test_operators.py --parallelize true

python-tests-asan:
  stage: test
  dependencies:
    - dbg-build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  tags:
    - ptrace
  variables:
    JITQPATH: $CI_PROJECT_DIR
    LD_LIBRARY_PATH: $LD_LIBRARY_PATH:/opt/clang+llvm-7.0.1/lib
    PYTHONPATH: $CI_PROJECT_DIR/python:$CI_PROJECT_DIR/backend/build
    OMP_NUM_THREADS: 1
    ASAN_SYMBOLIZER_PATH: /opt/clang+llvm-7.0.1/bin/llvm-symbolizer
    ASAN_LIBRARY_PATH: /opt/clang+llvm-7.0.1/lib/clang/7.0.1/lib/linux/libclang_rt.asan-x86_64.so
    ASAN_OPTIONS: detect_leaks=1
    SEGFAULT_SIGNALS: "bus abrt"
  before_script:
    - apt-get update && apt-get install -y python3-pip libgraphviz-dev time
    - pip3 install -r requirements.txt
    - echo -e "CC=clang-7.0\nCXX=clang++-7.0\nLIBOMPDIR=/opt/clang+llvm-7.0.1/lib" > backend/src/generate/src/code_gen/Makefile.local
    - cp jitq_config.ci.json jitq_config.json
    - export AWS_ACCESS_KEY_ID=$MINIO_ACCESS_KEY
    - export AWS_SECRET_ACCESS_KEY=$MINIO_SECRET_KEY
    - export AWS_S3_ENDPOINT=http://s3server:9000
  script:
    - cd python/jitq/tests
    - /usr/bin/time -v catchsegv $JITQPATH/tools/run_with_asan.sh python3 -u -m pytest

cpp-test:
  stage: test
  dependencies:
    - dbg-build
  image: ingomuellernet/buildenv-jitq:2019-07-21
  tags:
    - ptrace
  variables:
    GTEST_COLOR: "1"
    SEGFAULT_SIGNALS: "bus abrt"
  before_script:
    - apt-get update && apt-get install -y time
  script:
    - cd backend/build
    - /usr/bin/time -v catchsegv ../../tools/run_with_asan.sh ctest -V
